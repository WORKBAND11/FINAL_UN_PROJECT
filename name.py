import telebot
from tokeeen import mytokeen
import sympy as sp
import matplotlib

matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib.pyplot as plt
import numpy as np

bot = telebot.TeleBot(mytokeen)
from telebot import types


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == "/start":
        bot.send_message(message.from_user.id,
                         "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –º–æ—ë–º –ø–µ—Ä–≤–æ–º, –Ω–µ —Å–∞–º–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–º –Ω–∞ Python!")
        keyboard = types.InlineKeyboardMarkup()
        key_math = types.InlineKeyboardButton(text='–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='math')
        keyboard.add(key_math)
        key_geo = types.InlineKeyboardButton(text='–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤', callback_data='geo')
        keyboard.add(key_geo)
        bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å:', reply_markup=keyboard)
    elif message.text == "/help":
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start. –ü–∏—à–∏—Ç–µ –≤—Å—ë —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
    else:
        bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /help.")


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "math":
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:"
        keyboard = types.InlineKeyboardMarkup()
        key_add = types.InlineKeyboardButton(text='–û–±—ã—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è', callback_data='usuall')
        keyboard.add(key_add)
        key_equation = types.InlineKeyboardButton(text='–û–±—ã—á–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è', callback_data='usurav')
        keyboard.add(key_equation)
        bot.send_message(call.from_user.id, msg, reply_markup=keyboard)

    elif call.data == "geo":
        msg = "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:"
        keyboard = types.InlineKeyboardMarkup()
        key_linear = types.InlineKeyboardButton(text='–õ–∏–Ω–µ–π–Ω—ã–π (y = kx + b)', callback_data='linear_graph')
        keyboard.add(key_linear)
        key_quadratic = types.InlineKeyboardButton(text='–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π (y = ax¬≤ + bx + c)',
                                                   callback_data='quadratic_graph')
        keyboard.add(key_quadratic)
        bot.send_message(call.from_user.id, msg, reply_markup=keyboard)

    elif call.data == "usuall":
        bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ...")
        bot.register_next_step_handler(call.message, process_expression)

    elif call.data == "usurav":
        bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '2*x + 2 = 4'...")
        bot.register_next_step_handler(call.message, process_equation)

    elif call.data == "linear_graph":
        bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã k –∏ b —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: '2 3'):")
        bot.register_next_step_handler(call.message, process_linear_graph)

    elif call.data == "quadratic_graph":
        bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã a, b, c —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: '1 -2 1'):")
        bot.register_next_step_handler(call.message, process_quadratic_graph)


def process_expression(message):
    try:
        result = sp.sympify(message.text)
        bot.send_message(message.from_user.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤ –≤–≤–æ–¥–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.")


def process_equation(message):
    try:
        equation_text = message.text.replace(" ", "")
        if '=' not in equation_text:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞–∫ '='.")
        left, right = equation_text.split('=')
        equation = sp.Eq(sp.sympify(left), sp.sympify(right))
        solution = sp.solve(equation)
        bot.send_message(message.from_user.id, f"–†–µ—à–µ–Ω–∏–µ: x = {solution}")
    except Exception as e:
        bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –≤ –≤–≤–æ–¥–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è.")
def process_linear_graph(message):
    try:
        k, b = map(float, message.text.split())
        x = np.linspace(-10, 10, 400)
        y = k * x + b

        plt.figure()
        plt.plot(x, y, label=f'y = {k}x + {b}')
        plt.title("–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
        plt.xlabel('x')
        plt.ylabel('y')
        plt.grid(True)
        plt.legend()

        plt.savefig('graph.png')
        plt.close()

        with open('graph.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_quadratic_graph(message):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã a, b –∏ c
        a, b, c = map(float, message.text.split())
        x = np.linspace(-10, 10, 400)
        y = a * x ** 2 + b * x + c

        plt.figure()
        plt.plot(x, y, label=f'y = {a}x¬≤ + {b}x + {c}')
        plt.title("–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
        plt.xlabel('x')
        plt.ylabel('y')
        plt.grid(True)
        plt.legend()

        plt.savefig('graph.png')
        plt.close()

        with open('graph.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


bot.polling(none_stop=True, interval=0)
